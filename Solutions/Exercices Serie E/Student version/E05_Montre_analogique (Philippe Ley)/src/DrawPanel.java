
import java.awt.Color;
import java.awt.Graphics;
import java.time.LocalDateTime;
import java.awt.Font;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author scd
 */
public class DrawPanel extends javax.swing.JPanel {

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g) {
        LocalDateTime now = LocalDateTime.now();

        int year = now.getYear();
        int month = now.getMonthValue();
        int day = now.getDayOfMonth();

        int hour = now.getHour();
        int minute = now.getMinute();
        int second = now.getSecond();
        
        Color backgroundGray = new Color(214, 217, 223);
        g.setColor(backgroundGray);
        g.fillRect(0, 0, getWidth(), getHeight());

        int clockRadius = (int) (Math.min(getWidth(), getHeight()) * 0.8 * 0.5);
        int xCenter = getWidth() / 2;
        int yCenter = getHeight() / 2;

        Color brightYELLOW = new Color(255, 255, 153);
        g.setColor(brightYELLOW);
        g.fillOval(xCenter - clockRadius, yCenter - clockRadius, 2 * clockRadius, 2 * clockRadius);
        g.setColor(Color.BLUE);
        g.drawOval(xCenter - clockRadius, yCenter - clockRadius, 2 * clockRadius, 2 * clockRadius);
        
        for (int i = 0; i < 60; i++){
            int x = (int) (xCenter + clockRadius * Math.sin(i * (2 * Math.PI / 60)));
            int y = (int) (yCenter - clockRadius * Math.cos(i * (2 * Math.PI / 60)));
            g.drawLine(xCenter, yCenter, x, y);
        }
        g.setColor(brightYELLOW);
        g.fillOval(xCenter - clockRadius + clockRadius/15, yCenter - clockRadius + clockRadius/15 , 2 * clockRadius - clockRadius/15*2, 2 * clockRadius - clockRadius/15*2);

        g.setColor(Color.BLUE);
        for (int i = 0; i < 60; i++){
            if (i % 5 == 0){
                int x = (int) (xCenter + clockRadius * Math.sin(i * (2 * Math.PI / 60)));
                int y = (int) (yCenter - clockRadius * Math.cos(i * (2 * Math.PI / 60)));
                g.drawLine(xCenter, yCenter, x, y);
            }
        }
        g.setColor(brightYELLOW);
        g.fillOval(xCenter - clockRadius + clockRadius/15*2, yCenter - clockRadius + clockRadius/15*2 , 2 * clockRadius - clockRadius/15*4, 2 * clockRadius - clockRadius/15*4);
        
        g.setColor(Color.BLUE);

        g.setFont(new Font("Tahoma", Font.PLAIN, clockRadius/10));
        g.drawString(day + "." + month + "." + year, xCenter - clockRadius, yCenter + clockRadius);

        // Draw the second hand 
        int sLength = (int) (clockRadius * 0.8);
        int xSecond = (int) (xCenter + sLength * Math.sin(second * (2 * Math.PI / 60)));
        int ySecond = (int) (yCenter - sLength * Math.cos(second * (2 * Math.PI / 60)));
        
        Color darkORANGE = new Color(255, 128, 0);
        g.setColor(darkORANGE);
        g.drawLine(xCenter, yCenter, xSecond, ySecond);

        // Draw the minute hand 
        int mLength = (int) (clockRadius * 0.8);
        int xMinute = (int) (xCenter + mLength * Math.sin(minute * (2 * Math.PI / 60)));
        int yMinute = (int) (yCenter - mLength * Math.cos(minute * (2 * Math.PI / 60)));
        g.setColor(Color.BLUE);
        g.drawLine(xCenter, yCenter, xMinute, yMinute);

        // Draw the hour hand 
        int hLength = (int) (clockRadius * 0.5);
        int xHour = (int) (xCenter + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        int yHour = (int) (yCenter - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        g.setColor(Color.BLUE);
        g.drawLine(xCenter, yCenter, xHour, yHour);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
