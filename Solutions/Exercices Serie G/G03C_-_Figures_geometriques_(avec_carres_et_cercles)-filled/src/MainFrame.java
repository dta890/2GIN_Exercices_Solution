
import java.awt.Color;
import java.awt.event.MouseEvent;
import javax.swing.JColorChooser;

/**
 * @author FabFr297
 * 
 * New stuff in this 'fancy' version: 
 * - Shapes are filled => easy, except for triangles => use of Polygon...
 * - Each shape has a random color => method randomColor()
 * - Shapes are shown while drawn :
 *     => Shapes are create  during MousePressed event
 *     => Shapes are resized during MouseDragged event
 *     => Shapes need a 'setDimensions' Method (different for regular and irregular shapes)
 *     => Class Shapes can return the last Shape in the list (currently drawn shape)
 * 
 */
public class MainFrame extends javax.swing.JFrame {
    private Shapes shapes = new Shapes();
    private int fromX, fromY;
    private Color drawColor = Color.RED;

    public MainFrame() {
        initComponents();
        drawPanel.setShapes(shapes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawPanel = new DrawPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        drawPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawPanelMouseDragged(evt);
            }
        });
        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private Color randomColor() {  //alternativement
        int red   = (int)(Math.random()*256);        
        int green = (int)(Math.random()*256);        
        int blue  = (int)(Math.random()*256);
        return new Color(red, green, blue);
    }

    private void drawPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMousePressed
        if (evt.isControlDown()) {
            drawColor = JColorChooser.showDialog(this,"Choose a draw color", drawColor);
        } else {
            fromX  = evt.getX();
            fromY  = evt.getY();
            Shape shape;

            if (evt.isAltDown() || evt.getButton()==MouseEvent.BUTTON2)
                shape = new Triangle(fromX,fromY,1,1,drawColor);
            else if (evt.getButton()==MouseEvent.BUTTON1 && !evt.isShiftDown())        
                shape = new Rectangle(fromX,fromY,1,1,drawColor);        
            else if (evt.getButton()==MouseEvent.BUTTON1 && evt.isShiftDown())        
                shape = new Square(fromX,fromY,1,drawColor);        
            else if (evt.getButton()==MouseEvent.BUTTON3 && !evt.isShiftDown())  
                shape = new Ellipse(fromX,fromY,1,1,drawColor);
            else //if (evt.getButton()==MouseEvent.BUTTON3 && evt.isShiftDown())        
                shape = new Circle(fromX,fromY,1,drawColor);   

            shapes.add(shape);
        }
    }//GEN-LAST:event_drawPanelMousePressed

    
    
    private void drawPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseReleased
        if (!evt.isControlDown()) {
            Shape shape = shapes.lastShape();

            int x      = Math.min(fromX,evt.getX());
            int y      = Math.min(fromY,evt.getY());
            int width  = Math.abs(evt.getX()-fromX);
            int height = Math.abs(evt.getY()-fromY);
            int side   = Math.min(width, height);        
            shape.setDimensions(x, y, width, height);

            repaint();
        }
    }//GEN-LAST:event_drawPanelMouseReleased

    private void drawPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseDragged
        if (!evt.isControlDown()) {
            Shape shape = shapes.lastShape();

            int x      = Math.min(fromX,evt.getX());
            int y      = Math.min(fromY,evt.getY());
            int width  = Math.abs(evt.getX()-fromX);
            int height = Math.abs(evt.getY()-fromY);
            int side   = Math.min(width, height);        
            shape.setDimensions(x, y, width, height);

            repaint();
        }
    }//GEN-LAST:event_drawPanelMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private DrawPanel drawPanel;
    // End of variables declaration//GEN-END:variables

}