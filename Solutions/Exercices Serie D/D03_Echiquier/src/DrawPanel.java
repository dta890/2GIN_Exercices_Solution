
import java.awt.Color;
import java.awt.Graphics;

/*
 * DrawPanel.java
 *
 * Created on Feb 28, 2012, 8:38:29 PM
 * @author robertfisch
 */
public class DrawPanel extends javax.swing.JPanel
{

    /** Creates new form DrawPanel */
    public DrawPanel()
    {
        initComponents();       
    }
    
     public void paintComponent(Graphics g) {

        //Essai 1 avec des cases à longueur fixe et une variable booléenne (non centré)
//        boolean isGray = false;
//        for (int row = 0; row < 8; row++) {
//            for (int col = 0; col < 8; col++) {
//                if (!isGray) {
//                    g.setColor(Color.white);
//                } else {
//                    g.setColor(Color.lightGray);
//                }
//                isGray = !isGray;
//                g.fillRect(col * 30, row * 30, 30, 30); //dessiner les cases
//                g.setColor(Color.black);
//                g.drawRect(col * 30, row * 30, 30, 30); //dessiner les bordures
//            }
//            isGray = !isGray;  //!!
//        }
        

        //Essai 2 avec des cases à longueur fixe et un calcul avec row et col (non centré)
//        for (int row = 0; row < 8; row++) {
//            for (int col = 0; col < 8; col++) {
//                if ((col + row) % 2 == 0) {
//                    g.setColor(Color.white);
//                } else {
//                    g.setColor(Color.lightGray);
//                }
//                g.fillRect(col * 30, row * 30, 30, 30); //dessiner les cases
//                g.setColor(Color.black);
//                g.drawRect(col * 30, row * 30, 30, 30); //dessiner les bordures
//            }
//        }


        //Solution finale centrée, utilisant un calcul avec row et col.
        // calculer le côté d'un carreau
        int side = Math.min(getWidth(), getHeight());
        int squareSide = side / 8;

        // (c) calcul des espaces des bords pour centrer le damier
        //int offsetLeft = 0; 
        //int offsetTop  = 0;        
        int offsetLeft = (getWidth() - 8 * squareSide) / 2;
        int offsetTop = (getHeight() - 8 * squareSide) / 2;

        //effacer le dessin actuel
        g.setColor(Color.YELLOW);
        g.fillRect(0, 0, getWidth(), getHeight());

        //dessiner l'échiquier
        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                if ((r + c) % 2 == 0) {
                    g.setColor(Color.WHITE);
                } else {
                    g.setColor(Color.GRAY);
                }
                g.fillRect(offsetLeft + c * squareSide,
                        offsetTop + r * squareSide, squareSide, squareSide);
                // (b) Dessiner la bordure.
                g.setColor(Color.BLACK);
                g.drawRect(offsetLeft + c * squareSide,
                        offsetTop + r * squareSide, squareSide, squareSide);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
